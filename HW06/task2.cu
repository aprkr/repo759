// Generated by ChatGPT
#include <iostream>
#include <cstdlib>
#include <ctime>
#include <cuda_runtime.h>
#include "stencil.cuh"

// Helper function to fill an array with random numbers in the range [-1, 1]
void fill_random(float* arr, size_t size) {
    for (size_t i = 0; i < size; ++i) {
        arr[i] = static_cast<float>(rand()) / RAND_MAX * 2.0f - 1.0f; // Random values between [-1, 1]
    }
}

int main(int argc, char** argv) {
    // Parse command line arguments
    unsigned int n = std::stoul(argv[1]);            // Length of the image
    unsigned int R = std::stoul(argv[2]);            // Radius of the mask
    unsigned int threads_per_block = std::stoul(argv[3]); // Threads per block for kernel

    // Host arrays
    float* image = new float[n];
    float* mask = new float[2 * R + 1];
    float* output = new float[n];

    // Initialize the image and mask with random values in the range [-1, 1]
    srand(static_cast<unsigned int>(time(0))); // Seed random number generator
    fill_random(image, n);
    fill_random(mask, 2 * R + 1);

    // CUDA event for timing
    cudaEvent_t start, stop;
    cudaEventCreate(&start);
    cudaEventCreate(&stop);

    // Record start time
    cudaEventRecord(start);

    // Call the stencil function (launches the kernel)
    stencil(image, mask, output, n, R, threads_per_block);

    // Record stop time
    cudaEventRecord(stop);

    // Synchronize to ensure proper timing
    cudaEventSynchronize(stop);

    // Calculate the elapsed time in milliseconds
    float milliseconds = 0;
    cudaEventElapsedTime(&milliseconds, start, stop);

    // Print the last element of the output array
    std::cout << output[n - 1] << std::endl;

    // Print the time taken for the stencil operation
    std::cout << milliseconds << std::endl;

    // Clean up memory
    delete[] image;
    delete[] mask;
    delete[] output;

    // Destroy CUDA events
    cudaEventDestroy(start);
    cudaEventDestroy(stop);

    return 0;
}
